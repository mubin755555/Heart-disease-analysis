# -*- coding: utf-8 -*-
"""Heart desease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GaMLlnDIrnPLZMZwyDtqAJ9AlYXlBLh5
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/heart.csv")

data.head(5)

data.tail(5)

data.shape

print("Number of rows: ", data.shape[0])
print("Number of columns: ", data.shape[1])

data.info()

data.isnull().sum()

data_dup = data.duplicated().any()
print(data_dup)

# if output is True, there's some duplicates

data = data.drop_duplicates()

data.shape

data.describe()

plt.figure(figsize=(13,7))
sns.heatmap(data.corr(), annot=True)

data.columns

data['target'].value_counts()

# value_counts() - returns count of unique values in a column in descending order

sns.countplot(x= data['target'])

# 1 - heart disease
# from this count plot it is clear that half of the people have heart disease

data.columns

data['sex'].value_counts()

# use countplot to visualize it

sns.countplot(x = data['sex'])

# let me change this x labeLS. [0,1] is replaced by ['Female','Male']

plt.xticks([0,1],['Female','Male'])
plt.show()

data.columns

sns.countplot(x='sex',hue='target',data=data)
plt.xticks([1,0],['Male','Female'])
plt.legend(labels=['No-Disease','Disease'])
plt.show()

sns.distplot(data['age'],bins=20)
plt.show()

sns.countplot(x= data['cp'])
plt.xticks([0,1,2,3],["typical angina","atypical angina","non-anginal pain","asymptomatic"])
plt.xticks(rotation=0)
plt.show()

data.columns

sns.countplot(x='cp',hue='target', data=data)
plt.legend(labels=["No-Disease","Disease"])
plt.show()

data.columns

# lets create a histogram

data['trestbps'].hist()

data.columns

g = sns.FacetGrid(data,hue="sex", aspect=4)
g.map(sns.kdeplot,'trestbps',shade=True)
plt.legend(labels=['Male','Female'])

data.columns

# we are using histogram to check distribution of the column

data['chol'].hist()

data.columns

categ_val=[]
cont_val=[]

for column in data.columns:
    if data[column].nunique() <=10:
        categ_val.append(column)
    else:
        cont_val.append(column)

categ_val

cont_val

data.hist(cont_val,figsize=(15,6))
plt.tight_layout()
plt.show()

